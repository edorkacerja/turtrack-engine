---
apiVersion: v1
kind: Namespace
metadata:
  name: kafka-ecosystem

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: kafka-ecosystem
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      enableServiceLinks: false
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:latest
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: kafka-ecosystem
spec:
  selector:
    app: zookeeper
  ports:
    - port: 2181
      targetPort: 2181

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-server
  namespace: kafka-ecosystem
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-server
  template:
    metadata:
      labels:
        app: kafka-server
    spec:
      enableServiceLinks: false
      initContainers:
        - name: init-kafka
          image: busybox
          command: ['sh', '-c', "POD_IP=$(hostname -i); echo $POD_IP > /etc/kafka/pod-ip"]
          volumeMounts:
            - name: kafka-config
              mountPath: /etc/kafka
      containers:
        - name: kafka-server
          image: confluentinc/cp-kafka:5.2.1
          ports:
            - containerPort: 9092
            - containerPort: 29092
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_LISTENERS
              value: "INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "INTERNAL://$(POD_IP):29092,EXTERNAL://192.168.49.2:30092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "INTERNAL"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "false"
            - name: KAFKA_NUM_PARTITIONS
              value: "10"
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_LOG_RETENTION_HOURS
              value: "168"
            - name: KAFKA_LOG_RETENTION_BYTES
              value: "1073741824"
            - name: KAFKA_LOG_SEGMENT_BYTES
              value: "536870912"
            - name: KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS
              value: "300000"
          volumeMounts:
            - name: kafka-storage
              mountPath: /var/lib/kafka/data
            - name: kafka-config
              mountPath: /etc/kafka
      volumes:
        - name: kafka-storage
          emptyDir: {}
        - name: kafka-config
          emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: kafka-ecosystem
spec:
  selector:
    app: kafka-server
  type: NodePort  # Add this line to change the service type
  ports:
    - name: internal
      port: 29092
      targetPort: 29092
    - name: external
      port: 9092
      targetPort: 9092
      nodePort: 30092  # Add this line to specify the node port

---
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-setup
  namespace: kafka-ecosystem
spec:
  template:
    spec:
      enableServiceLinks: false
      containers:
        - name: kafka-setup
          image: confluentinc/cp-kafka:latest
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Kafka to be ready..."
              sleep 30
              echo "Creating topics..."
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 20 --replication-factor 1 --topic TO-BE-SCRAPED-dr-availability-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 20 --replication-factor 1 --topic TO-BE-SCRAPED-vehicle-details-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic SCRAPED-vehicle-details-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic SCRAPED-dr-availability-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic SCRAPED-vehicle-skeleton-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic PROCESSED-dr-availability-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic PROCESSED-vehicle-details-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic PROCESSED-vehicle-skeleton-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic DLQ-dr-availability-topic
              kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1 --topic DLQ-vehicle-details-topic
              echo "All topics created. Kafka setup completed."
      restartPolicy: OnFailure

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: kafka-ecosystem
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      enableServiceLinks: false
      containers:
        - name: kafka-ui
          image: provectuslabs/kafka-ui:latest
          ports:
            - containerPort: 8080
          env:
            - name: KAFKA_CLUSTERS_0_NAME
              value: "default"
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: "kafka:9092"
            - name: KAFKA_CLUSTERS_0_ZOOKEEPER
              value: "zookeeper:2181"
            - name: DYNAMIC_CONFIG_ENABLED
              value: "true"

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui
  namespace: kafka-ecosystem
spec:
  selector:
    app: kafka-ui
  ports:
    - port: 8080
      targetPort: 8080