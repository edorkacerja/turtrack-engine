version: '3.8'

name: search-scraper

services:
  calibrator:
    build: ./calibrator
    volumes:
      - turo_scraper_data:/usr/src/app/database
    networks:
      - turo_scraper_network
      - turtrack_common_network
      - kafka_network
    ports:
      - "5000:5000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  plotter:
    build: ./plotter
    volumes:
      - turo_scraper_data:/usr/src/app/public/database/
    networks:
      - turo_scraper_network
      - turtrack_common_network
      - kafka_network
    ports:
      - "5002:5002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  search-scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    volumes:
      - turo_scraper_data:/usr/src/app/database
    environment:
      SCRAPER_TYPE: search
      KAFKA_BROKERS: kafka:29092  # Use the internal Kafka port
      PORT: 5003
    deploy:
      replicas: 1
    networks:
      - turo_scraper_network
      - turtrack_common_network
      - kafka_network
    ports:
      - "5003:5003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
#    depends_on:
#      kafka:
#        condition: service_healthy

volumes:
  turo_scraper_data:
    external: true

networks:
  turo_scraper_network:
  turtrack_common_network:
    external: true
  kafka_network:
    external: true