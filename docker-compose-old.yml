# No version specified as it's no longer needed in recent Docker Compose versions

x-common-labels: &common-labels
  com.docker.compose.project: "turo-project"

services:
  # Turo-scraper services
  calibrator:
    extends:
      file: turo-scraper/docker-compose-old.yml
      service: calibrator
    labels:
      <<: *common-labels
      com.docker.compose.group: "turo-scraper"

  pricing-scraper:
    build: ./turo-scraper/scraper
    volumes:
      - shared-data:/usr/src/app/database
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCRAPER_TYPE: pricing
    deploy:
      replicas: 10
      update_config:
        parallelism: 2
        order: stop-first
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      <<: *common-labels
      com.docker.compose.group: "turo-scraper"

  vehicle-details-scraper:
    build: ./turo-scraper/scraper
    volumes:
      - shared-data:/usr/src/app/database
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SCRAPER_TYPE: vehicle-details
    deploy:
      replicas: 10
      update_config:
        parallelism: 2
        order: stop-first
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      <<: *common-labels
      com.docker.compose.group: "turo-scraper"

  plotter:
    extends:
      file: turo-scraper/docker-compose-old.yml
      service: plotter
    volumes:
      - shared-data:/usr/src/app/public/database/
    labels:
      <<: *common-labels
      com.docker.compose.group: "turo-scraper"

  # Kafka and Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    labels:
      <<: *common-labels
      com.docker.compose.group: "kafka-ecosystem"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_NUM_PARTITIONS: 10
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 536870912
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    healthcheck:
      test: [ "CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - kafka-data:/var/lib/kafka/data
    labels:
      <<: *common-labels
      com.docker.compose.group: "kafka-ecosystem"

  kafka-setup:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    command:
      - /bin/sh
      - -c
      - |
        echo "Waiting for Kafka to be ready..."
        cub kafka-ready -b kafka:29092 1 30
        echo "Creating topics..."
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 10 --replication-factor 1 --topic TO-BE-SCRAPED-dr-availability-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 10 --replication-factor 1 --topic TO-BE-SCRAPED-vehicle-details-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic SCRAPED-vehicle-details-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic SCRAPED-dr-availability-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic SCRAPED-vehicle-skeleton-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic PROCESSED-dr-availability-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic PROCESSED-vehicle-details-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic PROCESSED-vehicle-skeleton-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic DLQ-dr-availability-topic
        kafka-topics --create --if-not-exists --bootstrap-server kafka:29092 --partitions 1 --replication-factor 1 --topic DLQ-vehicle-details-topic
        echo "All topics created. Kafka setup completed."
        sleep infinity
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server kafka:29092 | grep -q 'SCRAPED-vehicle-details-topic' && kafka-topics --list --bootstrap-server kafka:29092 | grep -q 'DLQ-dr-availability-topic'"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    labels:
      <<: *common-labels
      com.docker.compose.group: "kafka-ecosystem"

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: default
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka:29092,localhost:29092,localhost:9092,kafka:9092'
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - kafka
      - zookeeper
    labels:
      <<: *common-labels
      com.docker.compose.group: "kafka-ecosystem"

  # Data Processing Services
  data-processor-service:
    build:
      context: ./turtrack-file-processing/data-processor-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/turo
      SPRING_DATASOURCE_USERNAME: turo_user
      SPRING_DATASOURCE_PASSWORD: turo_password
    labels:
      <<: *common-labels
      com.docker.compose.group: "data-processing"

  data-persistor-service:
    build:
      context: ./turtrack-file-processing/data-persistor-service
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://host.docker.internal:5432/turo
      SPRING_DATASOURCE_USERNAME: turo_user
      SPRING_DATASOURCE_PASSWORD: turo_password
    labels:
      <<: *common-labels
      com.docker.compose.group: "data-processing"

volumes:
  shared-data:
  kafka-data: